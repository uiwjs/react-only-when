{"version":3,"sources":["logo.svg","../../src/index.tsx","Example.tsx","index.tsx","../README.md"],"names":["OnlyWhen","props","className","singleChild","React","style","extendedProps","keepNode","hiddenMode","display","visibility","when","Checkbox","value","onChange","type","name","checked","App","useState","setWhen","setHiddenMode","padding","backgroundColor","minWidth","borderRadius","e","target","ReactDOM","render","fixed","href","src","logo","alt","Example","source","document","getElementById"],"mappings":"sMAAe,MAA0B,iC,sECmB1B,SAASA,EAASC,GAC/B,IAAM,EAAN,EAAM,WAAN,EAAM,OAAN,EAAM,WAA8BC,EAApC,EAAoCA,UAC9BC,EAAcC,kBAApB,GACA,EAAuCD,EAAvC,MAAQE,EAAR,EAAQA,MAAR,WACMC,EAAgB,IAAH,GAAnB,GAEMC,EAAWC,GAAjB,SAA+BA,EAe/B,OAdA,IACE,QAAIA,EACFF,cAA6BA,aAAH,SAAoCJ,GAApC,KAA1BI,OAEAA,iBAEME,eAA4B,CAAEC,QAAS,QACvCD,kBAA+B,CAAEE,WAAY,YAOhDC,EAAOR,EAFCI,EADAH,mBAAf,GACA,K,WC7BF,SAASQ,EAASX,GAChB,IAAQO,EAAgCP,EAAhCO,WAAYK,EAAoBZ,EAApBY,MAAOC,EAAab,EAAba,SAC3B,OACE,kCACE,uBAAOC,KAAK,QAAQF,MAAOL,EAAYQ,KAAK,aAAaC,QAAST,IAAeK,EAAOC,SAAUA,IAAa,IAC9GD,KAKP,IAqBeK,EArBO,WACpB,MAAwBC,oBAAS,GAAjC,mBAAOR,EAAP,KAAaS,EAAb,KACA,EAAoCD,mBAAsC,QAA1E,mBAAOX,EAAP,KAAmBa,EAAnB,KACA,OACE,sBAAKhB,MAAO,CAAEiB,QAAS,GAAIC,gBAAiB,mBAAoBC,SAAU,IAAKC,aAAc,GAA7F,UACE,kCACE,uBAAOV,KAAK,WAAWE,QAASN,EAAMG,SAAU,SAACY,GAAD,OAAON,EAAQM,EAAEC,OAAOV,YAD1E,mBACgGN,MAEhG,gCACE,cAACC,EAAD,CAAUJ,WAAYA,EAAYK,MAAM,OAAOC,SAAU,kBAAMO,EAAc,WAC7E,cAACT,EAAD,CAAUJ,WAAYA,EAAYK,MAAM,UAAUC,SAAU,kBAAMO,EAAc,cAChF,cAACT,EAAD,CAAUJ,WAAYA,EAAYK,MAAM,aAAaC,SAAU,kBAAMO,EAAc,iBACnF,cAACT,EAAD,CAAUJ,WAAYA,EAAYK,MAAM,MAAMC,SAAU,kBAAMO,EAAc,aAE9E,cAAC,EAAD,CAAMV,KAAMA,EAAMH,WAAYA,EAAYN,UAA0B,QAAfM,EAAuB,gBAAkB,GAA9F,SACE,iD,OC1BRoB,IAASC,OACP,sBAAK3B,UAAU,MAAf,UACE,cAAC,IAAD,CAAe4B,OAAK,EAACH,OAAO,UAAUI,KAAK,6CAC3C,yBAAQ7B,UAAU,aAAlB,UACE,qBAAK8B,IAAKC,EAAM/B,UAAU,WAAWgC,IAAI,SACzC,mFACA,8BACE,cAACC,EAAD,SAGJ,cAAC,IAAD,CAAiBC,OClBN,2qFDkBqBlC,UAAU,YAE5CmC,SAASC,eAAe,W","file":"static/js/main.a7ea8c7d.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.3931a054.svg\";","import React from 'react';\n\nexport interface OnlyWhenProps {\n  /** A single child element */\n  children: React.ReactElement;\n  /** When true, children will rendered as is */\n  when: boolean;\n  /** This is working in combination with hiddenMode={\"css\"} */\n  className?: string;\n  /**\n   * Determines how \"react-only-when\" should hide the child element\n   * \"null\": Will not render the child\n   * \"display\": Will render the child with display:none\n   * \"visibility\": Will render the child with visibility:hidden\n   * \"css\": Will render the child with a CSS class (you can pass it a custom className prop)\n   */\n  hiddenMode?: 'null' | 'display' | 'visibility' | 'css';\n}\n\nexport default function OnlyWhen(props: OnlyWhenProps) {\n  const { children, when, hiddenMode, className } = props;\n  const singleChild = React.Children.only(children);\n  const { style, ...restOfChildProps } = singleChild.props;\n  const extendedProps = { ...restOfChildProps };\n\n  const keepNode = hiddenMode && hiddenMode !== 'null';\n  if (keepNode) {\n    if (hiddenMode === 'css') {\n      extendedProps.className = `${extendedProps.className || ''} ${className || ''}`.trim();\n    } else {\n      extendedProps.style = {\n        ...style,\n        ...(hiddenMode === 'display' && { display: 'none' }),\n        ...(hiddenMode === 'visibility' && { visibility: 'hidden' }),\n      };\n    }\n  }\n  const cloned = React.cloneElement(singleChild, extendedProps);\n  const toHide = keepNode ? cloned : null;\n\n  return when ? singleChild : toHide;\n}\n","import { useState } from 'react';\nimport Only, { OnlyWhenProps } from '../';\n\ntype CheckboxProps = {\n  hiddenMode?: OnlyWhenProps['hiddenMode'];\n  value?: OnlyWhenProps['hiddenMode'];\n  onChange?: (evn: React.ChangeEvent<HTMLInputElement>) => void;\n};\n\nfunction Checkbox(props: CheckboxProps) {\n  const { hiddenMode, value, onChange } = props;\n  return (\n    <label>\n      <input type=\"radio\" value={hiddenMode} name=\"hiddenMode\" checked={hiddenMode === value} onChange={onChange} />{' '}\n      {value}\n    </label>\n  );\n}\n\nconst App: React.FC = () => {\n  const [when, setWhen] = useState(true);\n  const [hiddenMode, setHiddenMode] = useState<OnlyWhenProps['hiddenMode']>('null');\n  return (\n    <div style={{ padding: 10, backgroundColor: 'rgb(0 0 0 / 17%)', minWidth: 360, borderRadius: 5 }}>\n      <label>\n        <input type=\"checkbox\" checked={when} onChange={(e) => setWhen(e.target.checked)} /> when={`${when}`}\n      </label>\n      <div>\n        <Checkbox hiddenMode={hiddenMode} value=\"null\" onChange={() => setHiddenMode('null')} />\n        <Checkbox hiddenMode={hiddenMode} value=\"display\" onChange={() => setHiddenMode('display')} />\n        <Checkbox hiddenMode={hiddenMode} value=\"visibility\" onChange={() => setHiddenMode('visibility')} />\n        <Checkbox hiddenMode={hiddenMode} value=\"css\" onChange={() => setHiddenMode('css')} />\n      </div>\n      <Only when={when} hiddenMode={hiddenMode} className={hiddenMode === 'css' ? 'w-only-hidden' : ''}>\n        <h1>Here I Am</h1>\n      </Only>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport MarkdownPreview from '@uiw/react-markdown-preview';\nimport GitHubCorners from '@uiw/react-github-corners';\nimport logo from './logo.svg';\nimport Example from './Example';\nimport MDStr from '../README.md';\nimport './App.css';\n\nReactDOM.render(\n  <div className=\"App\">\n    <GitHubCorners fixed target=\"__blank\" href=\"https://github.com/uiwjs/react-only-when\" />\n    <header className=\"App-header\">\n      <img src={logo} className=\"App-logo\" alt=\"logo\" />\n      <p>A declarative component for conditional rendering.</p>\n      <div>\n        <Example />\n      </div>\n    </header>\n    <MarkdownPreview source={MDStr} className=\"info\" />\n  </div>,\n  document.getElementById('root'),\n);\n","export default \"react-only-when\\n===\\n\\n[![Build & Deploy](https://github.com/uiwjs/react-only-when/actions/workflows/ci.yml/badge.svg)](https://github.com/uiwjs/react-only-when/actions/workflows/ci.yml) [![npm bundle size](https://img.shields.io/bundlephobia/minzip/@uiw/react-only-when)](https://www.npmjs.com/package/@uiw/react-only-when) [![npm version](https://img.shields.io/npm/v/@uiw/react-only-when.svg)](https://www.npmjs.com/package/@uiw/react-only-when) [![Coverage Status](https://coveralls.io/repos/github/uiwjs/react-only-when/badge.svg?branch=main)](https://coveralls.io/github/uiwjs/react-only-when?branch=main)\\n\\nA declarative component for conditional rendering. Copy [`react-only-when`](https://github.com/sag1v/react-only-when), let it support TypeScript.\\n\\n## Quick Start\\n\\n```bash\\n$ npm install --save @uiw/react-only-when\\n```\\n\\n## Usage\\n\\n```jsx\\nimport Only from '@uiw/react-only-when'\\n \\n<Only when={true}>\\n  <h1>Here I Am</h1>\\n</Only>\\n```\\n\\n## Example\\n\\n```jsx\\nimport React from 'react';\\nimport Only from '@uiw/react-only-when';\\n\\nfunction App() {\\n  const [show, setShow] = useState(true)\\n  return (\\n    <div className=\\\"app\\\">\\n      <button onClick={() => setShow(!show)}>Toggle</button>\\n      <Only when={show}>\\n        <h1>Here I Am</h1>\\n      </Only>\\n    </div>\\n  )\\n}\\n```\\n\\n## props\\n\\n| prop name  | type | default | isRequired | description |\\n| ----- | ----- | ----- | ----- | ----- |\\n| children | react element | `null` | `true` | A single child element |\\n| when | bool | `false` | `true` | When true, children will rendered as is |\\n| hiddenMode | string | `null`   | `false` | Determines how children should be hidden |\\n| className  | string | `r-o_hidden` | `false` | This is working in combination with `hiddenMode={\\\"css\\\"}` |\\n\\n### hiddenMode enum\\n\\n| hiddenMode | description |\\n| ----- | ----- |\\n| `null` | Will not render the child |\\n| `display` | Will render the child with `display:none` |\\n| `visibility` | Will render the child with `visibility:hidden` |\\n| `css` | Will render the child with a CSS class (you can pass it a custom `className` prop) |\\n\\n\\n## Development\\n\\nRuns the project in development mode.  \\n\\n```bash\\n# Step 1, run first, listen to the component compile and output the .js file\\n# listen for compilation output type .d.ts file\\nnpm run watch\\n# Step 2, development mode, listen to compile preview website instance\\nnpm run start\\n```\\n\\n**production**\\n\\nBuilds the app for production to the build folder.\\n\\n```bash\\nnpm run build\\n```\\n\\nThe build is minified and the filenames include the hashes.\\nYour app is ready to be deployed!\\n\\n\\n## License\\n\\nMIT Â© [`sag1v`](https://github.com/sag1v) & [`uiwjs`](https://github.com/uiwjs)\";"],"sourceRoot":""}